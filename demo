(define (eval_ exp env)
  (cond ((self-evalating? exp) exp)
        ((variable? exp) (eval-variable exp env))
        ((if? exp) (eval-if exp env))
        ((define? exp) (eval-define exp env))
        ((assignment? exp) (eval-set exp env))
        ((lambda? exp)
         (make-procedure
          (lambda-parameters exp)
          (lambda-body exp)
          env))
        ((application? exp)
         (apply_ 
          (eval_ (oprator exp) env)
          (list-of-values (oprands exp) env)
          env))
        (else (error "bad syntax"))))

; eval一个过程所依赖的环境（过程调用创建的环境"调用环境"）, 是由这个过程的实参，和这个过程的定义所在的环境构成的。
; 过程的实参在eval该过程前先eval出
; 过程定义所在的环境包含在procedure的数据结构内，会被反复的使用：在创建调用环境时被作为外围环境。

; 而且，过程的定义所在的环境也是由别的过程apply所形成的，除了最后的全局环境。
; 一个环境对于创建它的过程A来说，属于在apply时创建的、在eval时使用的“调用环境”。对于在过程A的body内define出的过程来说，A的调用环境就属于A内部过程的“定义所在的环境”。在全局环境中define出的过程的定义环境，就是全局环境。

; 所以，任意过程 P 的“定义环境” 被包含在每次 P 被调用而创建“调用环境”中作为外围环境。
; 每次对 P 的“定义环境”的修改在下一次调用 P 时必须仍然有效
; 所以必须保证：取得过程P的数据结构中的env，将其传入eval-set修改后。效果必须在过程P数据结构中的env生效。而不是类似只修改了“传入的副本”的行为。
; 而这是由基本的 Lisp 解释器保证的。

; 发现，用于解释相同的语言的两个解释器，更高层次的解释器根本无需实现被实现语言的“传值”、“返回值”等机制。
; 根据“环境模型”的抽象，就能实现完全一样的过程调用语言。
; 为什么？
; “环境模型”解释了在不同的上下文中，变量对应到哪一个值的问题。
; 求出值并且拿来逐层“替换”、“具体化”规则的操作，被“元”语言在eval，apply的循环中隐含的描述出来了。

; 使用"元"语言描述语言“替换”、“具体化”方式，如 (apply (eval_ (oprator exp) env) ...).
; 建立在实现该语言的语言，即"元"语言的复合功能之上。

; 关键在于, 要探究语言最终到底是如何"替换"的，不能停留在本身就具备这些"隐含"意义的语言上。
; 必须下降到不需要依靠这些意义来表达的规则模型和描述这个模型的语言上。即机器模型和机器语言。
 

(define (apply_ procedure arguments)  
  (cond ((primitive-procedure? procedure)
         (primitive-apply procedure arguments))
        (compound-procedure?
         (eval_
          (procedure-body procedure)
          (extend-env
           (procedure-parameters procedure)
           arguments
           (procedure-env procedure))))))

;--------------------------------------------------------
(define (eval-variable exp env)
  (lookup-variable exp env))

(define (eval-define exp env)
  (define-variable!
    (definition-variable exp)
    (eval_ (definition-value exp) env)
    env))

(define (eval-set exp env)
  (set-variable!
   (assignment-variable exp)
   (eval_ (assignment-value exp) env)
   env))

(define (eval-if exp env)
  (define predict (if-predict exp))
  (define consequence (if-consequence exp))
  (define alternative (if-alternative exp))
  (if (true? (eval_ predict env))
      (eval_ consequence env)
      (eval_ alternative env)))

(define (true? exp)
  (or exp
      (number? exp)
      (string? exp)
      (pair? exp)))

(define apply-underlying-scheme apply)
(define (primitive-apply primitive-procedure arguments)
  (apply-underlying-scheme
   (primitive-procedure-body primitive-procedure)
   arguments))

(define (list-of-values exps env)
  (if (no-oprands? exps)
      '()
      (cons (eval_ (first-oprand exps) env)
            (list-of-values (rest-oprands exps) env))))


;--------------------------------------------------------
(define (application? exp) (pair? exp))

(define (oprator exp) (car exp))

(define (oprands exp) (cdr exp))

(define (no-oprands? exps) (null? exps))

(define (first-oprand ops) (car ops))

(define (rest-oprands ops) (cdr ops))

(define (tagged-list? list tag)
  (and (pair? list)
       (eq? (car list) tag)))

(define (self-evalating? exp)
  (or  (number? exp) 
       (string? exp)))

(define (variable? exp)
  (symbol? exp))

(define (primitive-procedure? procedure)
  (tagged-list? procedure 'primitive))

(define (compound-procedure? procedure)
  (tagged-list? procedure 'procedure))

(define (if? exp)
  (tagged-list? exp 'if))
(define (if-predict exp)
  (cadr exp))
(define (if-consequence exp)
  (caddr exp))
(define (if-alternative exp)
  (if (null? (cadddr exp))
      #f
      (cadddr exp)))

(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (lambda-parameters lambda-exp)
  (cadr lambda-exp))
(define (lambda-body lambda-exp)
  (caddr lambda-exp))
(define (make-lambda parameters body)
  (list 'lambda parameters body))

(define (define? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (variable? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (variable? (cadr exp))
      (caddr exp)
      (make-lambda
       (cdadr exp)
       (caddr exp)))) ; 不支持begain（表达式序列）时，假设过程体只有一个表达式来提取（使用caddr）. 支持begain则要把过程体作为表达式的列表提取（使用cddr）

(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp)
  (cadr exp))
(define (assignment-value exp)
  (caddr exp))



;---------------------------------------------------
(define (primitive-procedure-body primitive-procedure)
  (cadr primitive-procedure))

(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (procedure-parameters procedure)
  (cadr procedure))
(define (procedure-body procedure)
  (caddr procedure))
(define (procedure-env procedure)
  (cadddr procedure))

(define empty-env '())
(define (extend-env parameters arguments base-env)
  (list (cons parameters arguments) base-env)) ; (cons parameters arguments) 即 "Frame" 的序列
(define (env-parameters env) (caar env))
(define (env-arguments env) (cdar env))
(define (enclosing-env env) (cadr env))
(define (add-binding-to-env! var val env)
  (define new-parameters (cons var (env-parameters env)))
  (define new-arguments  (cons val (env-arguments env)))
  (set-car! env (cons new-parameters new-arguments)))


(define (lookup-variable var env)
  (define (env-loop env)
    (define (find-var-in-env vars vals)
      (cond ((eq? vars '())
             (env-loop (enclosing-env env)))
            ((eq? var (car vars))
             (car vals))
            (else
             (find-var-in-env (cdr vars) (cdr vals)))))
    (if (eq? env '())
        (error 'no-such-variable)
        (find-var-in-env (env-parameters env) (env-arguments env))))
  (if (eq? env '())
      (error "unexpect environment")
      (env-loop env)))

(define (set-variable! var val env)
  (define (env-loop env)
    (define (set-var-in-env vars vals)
      (cond ((eq? vars '())
             (env-loop (enclosing-env env)))
            ((eq? var (car vars))
             (set-car! vals val)) ; 所有 find-var-in-env 调用的外层框架都是同一个。
            (else
             (set-var-in-env (cdr vars) (cdr vals)))))
    (if (eq? env '())
        (error "no such variable")
        (set-var-in-env (env-parameters env) (env-arguments env))))
  (if (eq? env '())
      (error "unexpect environment")
      (env-loop env))
  'ok-set)

(define (define-variable! var val env)
  (define (env-loop env)
    (define (set-var-in-env vars vals)
      (cond ((eq? vars '())
             (add-binding-to-env! var val env))
            ((eq? var (car vars))
             (set-car! vals val))
            (else
             (set-var-in-env (cdr vars) (cdr vals)))))
    (if (eq? env '())
        (error "no such variable")
        (set-var-in-env (env-parameters env) (env-arguments env))))
  (if (eq? env '())
      (error "unexpect environment")
      (env-loop env))
  'ok-define)

;----------------------------------------------------------
(define primitive-procedures
  (list (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '< <)
        (list '> >)
        (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)))

(define primitive-procedure-names
  (map car primitive-procedures))

(define primitive-procedure-bodys
  (map (lambda (proc) (list 'primitive (cadr proc))) primitive-procedures)) 
  
(define the-empty-global-environment '())

(define (set-up-the-global-environment)
  (let ((the-global-environment (extend-env primitive-procedure-names
                                            primitive-procedure-bodys
                                            the-empty-global-environment)))
    (extend-env (list 'true 'false) (list #t #f) the-global-environment)))

(define the-global-environment (set-up-the-global-environment))

(define (driver-loop)
  (let ((exp (read)))
    (user-print (eval_ exp the-global-environment))
    (driver-loop)))

(define (user-print val)
  (if (compound-procedure? val)
      (display (list 'compound-procedure
                     (procedure-parameters val)
                     (procedure-body val)
                     '<procedure-env>))
      (display val)))

(driver-loop)
